import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'minimumBribes' function below.
     *
     * The function accepts INTEGER_ARRAY q as parameter.
     */

    public static void minimumBribes(List<Integer> q) {
    // Write your code here
        int ans = 0;
        Stack<Integer> qq = new Stack<>();
        for (int i = 0; i < q.size(); i++) {
            qq.add(q.get(i));
        }
        
        for (int i = q.size(); i >= 1; i--) {
            List<Integer> smt = new ArrayList<>();
            boolean ok = false;
            for (int j = 1; j <= Math.min(3, q.size()); j++) {
                int value = qq.pop();
                if (value == i) {
                    ans += (j - 1);
                    ok = true;
                    break;
                }
                smt.add(value);
                
            }
            if (!ok) {
                System.out.println("Too chaotic");
                return;
            }
            for (int j = smt.size() - 1; j >= 0; j--) {
                qq.add(smt.get(j));
            }
        }
        System.out.println(ans);
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, t).forEach(tItr -> {
            try {
                int n = Integer.parseInt(bufferedReader.readLine().trim());

                List<Integer> q = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                    .map(Integer::parseInt)
                    .collect(toList());

                Result.minimumBribes(q);
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
    }
}